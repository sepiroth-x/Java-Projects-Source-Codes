/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package complabinventory;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import profilebrowser.DatabaseConnection;

/**
 *
 * @author sepirothx
 */
public class toolsSearch extends javax.swing.JFrame {
    
    private int tool_id;
    private int tool_qty;
    private String tool_name;
    private String tool_category;
    private String tool_description;
    private String tool_date_purchased;
  

    /**
     * Creates new form toolsSearch
     */
    public toolsSearch() {
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setResizable(false);
        
          try {
        
          // this sql query will pull out all database records
        String query = "SELECT * FROM tools"; //SQL Syntax
            
         //create object for the DatabaseConnection
        profilebrowser.DatabaseConnection dbc = new profilebrowser.DatabaseConnection();
        
        //Declare variables to capture database credentials
        String jdbcDriver = dbc.getJdbcDriver();
        String dbConnectionURL = dbc.getDbConnectionURL();
        String dbUsername = dbc.getDbUsername();
        String dbPassword = dbc.getDbPassword();
        
        Class.forName(jdbcDriver);
        Connection connection = DriverManager.getConnection(dbConnectionURL,
                dbUsername,dbPassword);
        
        PreparedStatement statement = connection.prepareStatement(query);
        
        ResultSet resultSet = statement.executeQuery();
        
        if(resultSet.next()) {
            
            System.out.println("Connection established!");
            this.tool_id = resultSet.getInt("id");
            this.tool_name = resultSet.getString("toolname");
            this.tool_category = resultSet.getString("tool_category");
            this.tool_description = resultSet.getString("description");
            this.tool_qty = resultSet.getInt("qty_in_stock");
            this.tool_date_purchased = resultSet.getString("date_purchased");
            
            System.out.println("Record ID: " + this.tool_id);
            System.out.println("Tool Name: " + this.tool_name);
            System.out.println("Tool Category : " + this.tool_category);
            System.out.println("Tool Description: " + this.tool_description);
            System.out.println("In-Stock Qty: " + this.tool_qty);
            System.out.println("Date Purchased: " + this.tool_date_purchased);
            
            
            //display the output in the UI
           toolnameTF.setText(this.tool_name);
           descriptionTA.setText(this.tool_description);
           qtyTF.setText(String.valueOf(tool_qty));
           dateLabel.setText(tool_date_purchased);
           
            
     
        }
            
            connection.close();
            resultSet.close();
            statement.close();
            
            
        } catch (ClassNotFoundException | SQLException e  ) {
            
            e.printStackTrace();
            
        }
        

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        toolsTable = new javax.swing.JTable();
        searchBoxTF = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        toolnameTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTA = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        qtyTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toolsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        toolsTable.setEnabled(false);
        jScrollPane2.setViewportView(toolsTable);

        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Tool Name");

        toolnameTF.setEditable(false);

        jLabel2.setText("Description:");

        descriptionTA.setEditable(false);
        descriptionTA.setColumns(20);
        descriptionTA.setRows(5);
        jScrollPane1.setViewportView(descriptionTA);

        jLabel3.setText("In-Stocks:");

        qtyTF.setEditable(false);
        qtyTF.setText("0");

        jLabel4.setText("Date Purchased:");

        dateLabel.setText("YYYY-MM-DD");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchBoxTF, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 711, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(toolnameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(qtyTF))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBoxTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(toolnameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(qtyTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(dateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
       
         try{
             
            // this sql query will pull out all database records
              String searchQuery = " SELECT * FROM tools "
                      + "WHERE id LIKE ? OR " 
                      + "toolname LIKE ? OR " 
                      + "tool_category LIKE ? OR "
                      + "status LIKE ? OR "
                      + "date_purchased LIKE ? "; 

               //create object for the DatabaseConnection
              DatabaseConnection dbc = new DatabaseConnection();

              //Declare variables to capture database credentials
              String jdbcDriver = dbc.getJdbcDriver();
              String dbConnectionURL = dbc.getDbConnectionURL();
              String dbUsername = dbc.getDbUsername();
              String dbPassword = dbc.getDbPassword();

              Class.forName(jdbcDriver);
              Connection connection = DriverManager.getConnection(dbConnectionURL,
                      dbUsername,dbPassword);

              PreparedStatement statement = connection.prepareStatement(searchQuery);
            
             // Set search parameters (you can customize this part)
             String searchKeyword = searchBoxTF.getText(); // Replace with your search keyword
             statement.setString(1, "%" + searchKeyword + "%");
             statement.setString(2, "%" + searchKeyword + "%");
             statement.setString(3, "%" + searchKeyword + "%");
             statement.setString(4, "%" + searchKeyword + "%");
             statement.setString(5, "%" + searchKeyword + "%");
           
              ResultSet resultSet = statement.executeQuery();
           // Check if a row was found
           
            if (resultSet.next()) {
                 this.tool_id = resultSet.getInt("id");
                 this.tool_name = resultSet.getString("toolname");
                 this.tool_category = resultSet.getString("tool_category");
                 this.tool_description = resultSet.getString("description");
                 this.tool_qty = resultSet.getInt("qty_in_stock");
                 this.tool_date_purchased = resultSet.getString("date_purchased");
                
 

                // Display the retrieved data to console
          
                
                 //display the output in the UI
                  toolnameTF.setText(this.tool_name);
                  descriptionTA.setText(this.tool_description);
                  qtyTF.setText(String.valueOf(this.tool_qty));
                  dateLabel.setText(this.tool_date_purchased);
                  
                  
                  
                      //display related data search to the table
                    // String searchQuery2 = "SELECT * FROM tools WHERE";
                    // Create a table model to store data
                    DefaultTableModel tableModel = new DefaultTableModel();
                    toolsTable.setModel(tableModel);
                    
                     /*this part is the application of centering the data in the cell, coming from the custom class inside
                    *the tablerelated package, inside CenteredTableCellRenderer class
                    **/
                    tablerelated.CenteredTableCellRenderer renderer = new tablerelated.CenteredTableCellRenderer();
                    toolsTable.setDefaultRenderer(Object.class, renderer);
                    
                    

                  
                    // Create a PreparedStatement
                    PreparedStatement preparedStatement = connection.prepareStatement(searchQuery);
                    preparedStatement.setString(1, "%" + searchKeyword + "%");
                    preparedStatement.setString(2, "%" + searchKeyword + "%");
                    preparedStatement.setString(3, "%" + searchKeyword + "%");
                    preparedStatement.setString(4, "%" + searchKeyword + "%");
                    preparedStatement.setString(5, "%" + searchKeyword + "%");
          

                    // Execute the query
                    ResultSet resultSet2 = preparedStatement.executeQuery();

                    // Get column names and add them to the table model
                    java.sql.ResultSetMetaData metaData = resultSet2.getMetaData();
                    
                    int columnCount = metaData.getColumnCount();
                    for (int i = 1; i <= columnCount; i++) {
                        
                            //tableModel.addColumn(metaData.getColumnName(i));
              
                            String columnName = metaData.getColumnName(i);
                            if ( columnName.equals("toolname") || 
                                 columnName.equals("tool_category") || 
                                 columnName.equals("qty_in_stock") || 
                                 columnName.equals("status")) {
                                 
                          
                                     tableModel.addColumn(columnName);
                                 
                                 
                            }
                        
                    }

                    // Add rows to the table model
                    while (resultSet2.next()) {
                        Object[] rowData = new Object[columnCount];
                        for (int i = 1; i <= columnCount; i++) {
                            //rowData[i - 1] = resultSet2.getObject(i);
                            
                            rowData[0] = resultSet2.getObject("toolname");
                            rowData[1] = resultSet2.getObject("tool_category");
                            rowData[2] = resultSet2.getObject("qty_in_stock");
                            rowData[3] = resultSet2.getObject("status");
                       
                            
                            
                        }
                        tableModel.addRow(rowData);
                    }
                  
                  
            } else {
                System.out.println("No matching records found.");
                JOptionPane.showMessageDialog(null, "No record found!");
            }
              
               
            connection.close();
            resultSet.close();
            statement.close();
            
        }  catch (ClassNotFoundException | SQLException e  ) {
            
            e.printStackTrace();
            
        
        
       
        }
        
        
        
        
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(toolsSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(toolsSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(toolsSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(toolsSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new toolsSearch().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dateLabel;
    private javax.swing.JTextArea descriptionTA;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField qtyTF;
    private javax.swing.JTextField searchBoxTF;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField toolnameTF;
    private javax.swing.JTable toolsTable;
    // End of variables declaration//GEN-END:variables
}
